name: Spring MVC Project Deployment
on:
  push:
    branches:
      - main  # Trigger only for pushes to the 'main' branch
  workflow_dispatch:
env:
  REGION: us-east-2
jobs:
  SourceCode_Testing:
    runs-on: ubuntu-latest
    steps:
      - name: Clone source code from the repo 
        uses: actions/checkout@v4.2.2 # From github marketplace

      - name: Maven Testing
        run: mvn test

      - name: Setup JDK11 for the workflow
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin' # See 'Supported distributions' for available options
          java-version: '11' #JDK 11 is old, but it's required to run the project since it's old
      
      - name: Setup SonarQube
        uses: warchant/setup-sonar-scanner@v7

      - name: SonarQube Scan # Sources should include the path of the source code to be scanned
        # java.binaries should be defined if you're running a java project
        # Create github secrets for the following variables
        run: |
          sonar-scanner \
            -Dsonar.host.url=${{ secrets.SONAR_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.organization=${{ secrets.SONAR_ORG }} \
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
            -Dsonar.sources=src/ \
            -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/
          
  BUILD_AND_PUSH_TO_ECR:
    needs: SourceCode_Testing
    runs-on: ubuntu-latest
    steps:
      - name: Clone source code from the repo
        uses: actions/checkout@v4.2.2 # From github marketplace

      - name: Search and replace local variables with secrets
        run: |
          sed -i 's/^jdbc.username=.*/jdbc.username=${{ secrets.RDS_USER }}/' src/main/resources/application.properties
          sed -i 's/^jdbc.password=.*/jdbc.password=${{ secrets.RDS_PASSWORD }}/' src/main/resources/application.properties
          sed -i 's/db01/${{ secrets.RDS_ENDPOINT }}/' src/main/resources/application.properties

      - name: Build docker image and upload it to ECR
        uses: kciter/aws-ecr-action@v5
        with:
          access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          account_id: ${{ secrets.AWS_ACCOUNT_ID }}
          tags: latest,${{ github.sha }}
          repo: ecr-actions
          region: ${{ env.REGION }}
          dockerfile: ./Dockerfile
          path: "."
          

      - name: Deploy to ECS
        env:
          ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}
          ECS_SERVICE: ${{ secrets.ECS_SERVICE }}
        run: |
          aws ecs update-service --region ${{ env.REGION }} --cluster $ECS_CLUSTER --service $ECS_SERVICE --force-new-deployment


